["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$fipp.edn","~:imports",null,"~:requires",["^ ","~$fipp.ednize","^9","~$fipp.visit","^:","~$fipp.engine","^;"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$pprint-document","^;","~$visit*","^:","~$record->tagged","^9","~$visit","^:","~$edn","^9"],"~:defs",["^ ","~$pretty-coll",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/edn.cljc","~:line",8,"~:column",7,"~:end-line",8,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^M",[[["^ ","~:keys",["~$print-level","~$print-length"],"~:as","~$printer"],"~$open","~$xs","~$sep","~$close","~$f"]]]]]],"^5","~$fipp.edn/pretty-coll","^G","cljs-test-runner-out/fipp/edn.cljc","^K",18,"~:method-params",["^M",[["~$p__3753","^T","^U","^V","^W","~$f"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^I",1,"~:variadic?",false,"^H",8,"~:ret-tag","~$cljs.core/IVector","^J",8,"~:max-fixed-arity",6,"~:fn-var",true,"^L",["^M",["^N",["^M",[[["^ ","^O",["^P","^Q"],"^R","^S"],"^T","^U","^V","^W","~$f"]]]]]],"~$EdnPrinter",["^ ","~:num-fields",4,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$fipp.visit/IVisitor","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$fipp.edn/EdnPrinter","^G","cljs-test-runner-out/fipp/edn.cljc","^K",22,"~:type",true,"^I",12,"~:internal-ctor",true,"^H",21,"~:record",true,"^J",21,"~:tag","~$function","~:skip-protocol-flag",["^4",["^19","^1:","^1;","^1<","^1=","^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"]]],"~$->EdnPrinter",["^ ","^E",null,"^F",["^ ","^G","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/edn.cljc","^K",22,"^I",12,"^1K",true,"~:factory","~:positional","^H",21,"^J",21,"^L",["^M",["^N",["^M",[["~$symbols","~$print-meta","^Q","^P"]]]]],"~:doc","Positional factory function for fipp.edn/EdnPrinter."],"^5","~$fipp.edn/->EdnPrinter","^G","cljs-test-runner-out/fipp/edn.cljc","^K",22,"^Y",["^M",[["^1S","^1T","^Q","^P"]]],"^[",null,"^10",["^M",[null,null]],"^I",1,"^1K",true,"^11",false,"^1Q","^1R","^H",21,"^12","^1I","^J",21,"^14",4,"^15",true,"^L",["^M",["^N",["^M",[["^1S","^1T","^Q","^P"]]]]],"^1U","Positional factory function for fipp.edn/EdnPrinter."],"~$map->EdnPrinter",["^ ","^E",null,"^F",["^ ","^G","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/edn.cljc","^K",22,"^I",12,"^1K",true,"^1Q","~:map","^H",21,"^J",21,"^L",["^M",["^N",["^M",[["~$G__3761"]]]]],"^1U","Factory function for fipp.edn/EdnPrinter, taking a map of keywords to field values."],"^5","~$fipp.edn/map->EdnPrinter","^G","cljs-test-runner-out/fipp/edn.cljc","^K",22,"^Y",["^M",[["^1Y"]]],"^[",null,"^10",["^M",[null,null]],"^I",1,"^1K",true,"^11",false,"^1Q","^1X","^H",21,"^12","^1I","^J",21,"^14",1,"^15",true,"^L",["^M",["^N",["^M",[["^1Y"]]]]],"^1U","Factory function for fipp.edn/EdnPrinter, taking a map of keywords to field values."],"~$pprint",["^ ","^E",null,"^F",["^ ","^G","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/edn.cljc","^H",91,"^I",7,"^J",91,"^K",13,"^L",["^M",["^N",["^M",[["~$x"],["~$x","~$options"]]]]],"~:top-fn",["^ ","^11",false,"~:fixed-arity",2,"^14",2,"^Y",[["~$x"],["~$x","^20"]],"^L",["^M",[["~$x"],["~$x","^20"]]],"^10",["^M",[null,null]]]],"^5","~$fipp.edn/pprint","^G","cljs-test-runner-out/fipp/edn.cljc","^K",13,"^21",["^ ","^11",false,"^22",2,"^14",2,"^Y",[["~$x"],["~$x","^20"]],"^L",["^M",[["~$x"],["~$x","^20"]]],"^10",["^M",[null,null]]],"^Y",[["~$x"],["~$x","^20"]],"^[",null,"^22",2,"^10",["^M",[null,null]],"^I",1,"^11",false,"~:methods",[["^ ","^22",1,"^11",false,"^1M","~$any"],["^ ","^22",2,"^11",false]],"^H",91,"^J",91,"^14",2,"^15",true,"^L",["^M",[["~$x"],["~$x","^20"]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:align","~:group","~:print-meta","^1S","~:print-level","^1T","^P","^H","~:print-length","~:form","^1M","^Q","~:symbols","~:text","~:span"]],"~:order",["^2=","^2>","^2B","^2;","^2:","^2@","^2<","^H","^2A","^1M","^2?","^1S","^1T","^Q","^P"]],"^1U","Provides a pretty document serializer and pprint fn for Clojure/EDN forms.\n  See fipp.clojure for pretty printing Clojure code."]