["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$fipp.engine","~:imports",null,"~:requires",["^ ","~$s","~$clojure.string","^9","^9","~$deque","~$fipp.deque","^;","^;"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$serialize-node",["^ ","^5","~$fipp.engine/serialize-node","~:file","cljs-test-runner-out/fipp/engine.cljc","~:line",10,"~:column",1,"~:end-line",10,"~:end-column",25,"~:meta",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",10,"^C",11,"^D",10,"^E",25],"~:tag","~$cljs.core/MultiFn"],"~$serialize",["^ ","~:protocol-inline",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",12,"^C",7,"^D",12,"^E",16,"~:arglists",["~#list",["~$quote",["^L",[["~$doc"]]]]]],"^5","~$fipp.engine/serialize","^A","cljs-test-runner-out/fipp/engine.cljc","^E",16,"~:method-params",["^L",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^C",1,"~:variadic?",false,"^B",12,"~:ret-tag",["^4",["~$cljs.core/IVector","~$any","~$clj-nil"]],"^D",12,"~:max-fixed-arity",1,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N"]]]]]],"~$annotate-rights",["^ ","^J",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",68,"^C",7,"^D",68,"^E",22,"^K",["^L",["^M",["^L",[["~$rf"]]]]],"~:doc","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"^5","~$fipp.engine/annotate-rights","^A","cljs-test-runner-out/fipp/engine.cljc","^E",22,"^P",["^L",[["^["]]],"^Q",null,"^R",["^L",[null,null]],"^C",1,"^S",false,"^B",68,"^T","~$function","^D",68,"^X",1,"^Y",true,"^K",["^L",["^M",["^L",[["^["]]]]],"^10","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"~$update-right",["^ ","^J",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",89,"^C",7,"^D",89,"^E",19,"^K",["^L",["^M",["^L",[["^:","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^S",true,"~:fixed-arity",2,"^X",2,"^P",[["^L",["^:","~$f","^14"]]],"^K",["^L",[["^:","~$f","~$&","^14"]]],"^R",["^L",[null]]]],"^5","~$fipp.engine/update-right","^A","cljs-test-runner-out/fipp/engine.cljc","^E",19,"^15",["^ ","^S",true,"^16",2,"^X",2,"^P",[["^L",["^:","~$f","^14"]]],"^K",["^L",[["^:","~$f","~$&","^14"]]],"^R",["^L",[null]]],"^P",[["^L",["^:","~$f","^14"]]],"^Q",null,"^16",2,"^R",["^L",[null]],"^C",1,"^S",true,"~:methods",[["^ ","^16",2,"^S",true,"^G","^V"]],"^B",89,"^T","^V","^D",89,"^X",2,"^Y",true,"^K",["^L",[["^:","~$f","~$&","^14"]]]],"~$annotate-begins",["^ ","^J",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",92,"^C",7,"^D",92,"^E",22,"^K",["^L",["^M",["^L",[[["^ ","~:keys",["~$width"],"~:as","~$options"]]]]]],"^10","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"^5","~$fipp.engine/annotate-begins","^A","cljs-test-runner-out/fipp/engine.cljc","^E",22,"^P",["^L",[["~$p__3731"]]],"^Q",null,"^R",["^L",[null,null]],"^C",1,"^S",false,"^B",92,"^T","^12","^D",92,"^X",1,"^Y",true,"^K",["^L",["^M",["^L",[[["^ ","^1:",["^1;"],"^1<","^1="]]]]]],"^10","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"~$format-nodes",["^ ","^J",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",164,"^C",7,"^D",164,"^E",19,"^K",["^L",["^M",["^L",[[["^ ","^1:",["^1;"],"^1<","^1="]]]]]],"^10","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"^5","~$fipp.engine/format-nodes","^A","cljs-test-runner-out/fipp/engine.cljc","^E",19,"^P",["^L",[["~$p__3740"]]],"^Q",null,"^R",["^L",[null,null]],"^C",1,"^S",false,"^B",164,"^T","^12","^D",164,"^X",1,"^Y",true,"^K",["^L",["^M",["^L",[[["^ ","^1:",["^1;"],"^1<","^1="]]]]]],"^10","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"~$pprint-document",["^ ","^J",null,"^F",["^ ","^A","/Users/jlynch/Exercism/clojurescript/hello-world/cljs-test-runner-out/fipp/engine.cljc","^B",234,"^C",7,"^D",234,"^E",22,"^K",["^L",["^M",["^L",[["~$document","^1="]]]]]],"^5","~$fipp.engine/pprint-document","^A","cljs-test-runner-out/fipp/engine.cljc","^E",22,"^P",["^L",[["^1D","^1="]]],"^Q",null,"^R",["^L",[null,null]],"^C",1,"^S",false,"^B",234,"^T","^W","^D",234,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^1D","^1="]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:nest","~:align","~:outdent","~:group","~:else","~:offset","~:default","~:terminate","~:too-far","~:width","~:op","~:node","~:begin","~:break","~:nodes","^B","~:right","~:escaped","~:position","~:pass","~:end","~:hierarchy","~:inline","~:text","~:span"]],"~:order",["^22","^1P","^1T","^24","^1N","^1U","^20","^1Z","^25","^B","^23","^1Q","^1W","^1M","^1V","^21","^1J","^1O","^1L","^1K","^1Y","^1S","^1[","^1X","^1R"]],"^10","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing"]