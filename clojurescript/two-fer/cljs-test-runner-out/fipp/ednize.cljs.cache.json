["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$fipp.ednize","~:imports",null,"~:requires",["^ ","~$s","~$clojure.string","^9","^9","~$fipp.util","^:"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$edn?","^:"],"~:defs",["^ ","~$IEdn",["^ ","~:meta",["^ ","~:protocol-symbol",true,"~:file","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","~:end-column",18,"~:column",14,"~:line",5,"~:protocol-info",["^ ","~:methods",["^ ","~$-edn",[["~$x"]]]],"~:end-line",5,"~:sigs",["^ ","~:-edn",["^ ","^5","^H","~:arglists",["~#list",[["~$x"]]],"~:doc",null]],"^N","Perform a shallow conversion to an Edn data structure.","~:jsdoc",["^M",["@interface"]]],"^A",true,"^5","~$fipp.ednize/IEdn","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",18,"^D",1,"^E",5,"^F",["^ ","^G",["^ ","^H",[["~$x"]]]],"~:info",null,"^I",5,"~:tag","~$any","^J",["^ ","^K",["^ ","^5","^H","^L",["^M",[["~$x"]]],"^N",null]],"~:impls",["^4",["~$cljs.core/ExceptionInfo","~$cljs.core/UUID"]],"^N","Perform a shallow conversion to an Edn data structure.","^O",["^M",["@interface"]]],"^H",["^ ","~:protocol-inline",null,"^@",["^ ","^B","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","^E",7,"^D",4,"^I",7,"^C",8,"~:protocol","^P","^N",null,"^L",["^M",["~$quote",["^M",[["~$x"]]]]]],"^X","^P","^5","~$fipp.ednize/-edn","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",8,"~:method-params",["^M",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^D",1,"~:variadic?",false,"^E",5,"~:ret-tag","^S","^I",7,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^Y",["^M",[["~$x"]]]]],"^N",null],"~$IOverride",["^ ","^@",["^ ","^A",true,"^B","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","^C",23,"^D",14,"^E",9,"^F",["^ ","^G",["^ "]],"^I",9,"^J",["^ "],"^N","Mark object as preferring its custom IEdn behavior.","^O",["^M",["@interface"]]],"^A",true,"^5","~$fipp.ednize/IOverride","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",23,"^D",1,"^E",9,"^F",["^ ","^G",["^ "]],"^Q",null,"^I",9,"^R","^S","^J",["^ "],"^T",["^4",[]],"^N","Mark object as preferring its custom IEdn behavior.","^O",["^M",["@interface"]]],"~$override?",["^ ","^W",null,"^@",["^ ","^B","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","^E",12,"^D",7,"^I",12,"^C",16,"^L",["^M",["^Y",["^M",[["~$x"]]]]]],"^5","~$fipp.ednize/override?","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",16,"^[",["^M",[["~$x"]]],"^10",null,"^11",["^M",[null,null]],"^D",1,"^12",false,"^E",12,"^13","~$boolean","^I",12,"^14",1,"^15",true,"^L",["^M",["^Y",["^M",[["~$x"]]]]]],"~$edn",["^ ","^W",null,"^@",["^ ","^B","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","^E",18,"^D",7,"^I",18,"^C",10,"^L",["^M",["^Y",["^M",[["~$x"]]]]]],"^5","~$fipp.ednize/edn","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",10,"^[",["^M",[["~$x"]]],"^10",null,"^11",["^M",[null,null]],"^D",1,"^12",false,"^E",18,"^13",["^4",[null,"^S","~$cljs.core/TaggedLiteral"]],"^I",18,"^14",1,"^15",true,"^L",["^M",["^Y",["^M",[["~$x"]]]]]],"~$record->tagged",["^ ","^W",null,"^@",["^ ","^B","/Users/jlynch/Exercism/clojurescript/two-fer/cljs-test-runner-out/fipp/ednize.cljs","^E",89,"^D",7,"^I",89,"^C",21,"^L",["^M",["^Y",["^M",[["~$x"]]]]]],"^5","~$fipp.ednize/record->tagged","^B","cljs-test-runner-out/fipp/ednize.cljs","^C",21,"^[",["^M",[["~$x"]]],"^10",null,"^11",["^M",[null,null]],"^D",1,"^12",false,"^E",89,"^13","^1=","^I",89,"^14",1,"^15",true,"^L",["^M",["^Y",["^M",[["~$x"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$uuid","~:ready","~:cause","~$object","~:else","~:pending","~$js","~:val","~$inst","~$ExceptionInfo","~:status","~:message","~:data"]],"~:order",["^1J","^1I","^1E","^1G","^1N","^1K","^1L","^1H","^1D","^1M","^1O","^1P","^1F"]],"^N",null]